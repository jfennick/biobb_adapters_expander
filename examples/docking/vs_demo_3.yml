steps:
  - obabel_extract_models_sdf:
      in:
        input_path: ../data/NCIOpen.sdf
        output_sdf_path: '&ligands.sdf'
        first_molecule: "1"
        last_molecule: "1"
        arg1: -r
  - receptor.yml:
  - obabel_split_sdf:
      in:
  #      input_path: '*ligands.sdf'
        output_sdf_path: '&ligand.sdf' # Array type
        arg1: -m
  - ligand_modeling_docking.yml: # scatter
  - autodock_vina_filter:
      in:
        input_log_paths: '*vina.log' # NOTE: plural
        docking_score_cutoff: -4.0
        max_num_decoys_per_ligand: 1
        max_num_decoys_total: 1
        input_batch_pdbqt_path: '*ligand_nested_split.pdbqt' # 2D Array type
        #input_batch_pdbqt_path: ~obabel_split_pdbqt/output_pdb_path # Not necessary if using explicit edge
        output_batch_pdbqt_path: '&ligand.pdbqt'
  - ligand_topol_params.yml: # scatter
  - stability.yml: # scatter

wic:
  graphviz:
    label: Cheminformatics + Docking + Initial Topology Setup
  steps:
    (2, receptor.yml):
      wic:
        inlineable: False
    (4, ligand_modeling_docking.yml):
      wic:
        inlineable: False
      scatter: [ligand_modeling_docking__step__1__flc.yml___flc__step__1__obgen___input_path]
    (6, ligand_topol_params.yml):
      wic:
        inlineable: False
      scatter: [ligand_topol_params__step__1__obabel_convert_mol2___input_path]
    (7, stability.yml):
      scatter: [stability__step__1__setup.yml___setup__step__1__editconf___input_crd_path,
                stability__step__1__setup.yml___setup__step__2__solvate___input_top_zip_path]
      scatterMethod: dotproduct
      wic:
        graphviz:
          label: Docking + MD Stability Analysis + Binding Free Energy
        steps:
          (1, stability.yml):
            wic:
              inlineable: False
              steps:
                (1, setup.yml):
                  wic:
                    steps:
                      (4, genion):
                        in:
                          output_top_zip_path: '&genion_complex.zip'
                (2, basic.yml):
                  wic:
                    steps:
                      (3, prod.yml):
                        wic:
                          steps:
                            (1, grompp):
                              in:
                                input_top_zip_path: '*genion_complex.zip'
                            (2, mdrun):
                              in:
                                output_crd_path: '&prod_complex.gro'
                            (3, cwl_watcher_analysis.yml):
                              wic:
                                backend: complex
                (3, analysis.yml):
                  wic:
                    steps:
                      (1, analysis_realtime.yml):
                        wic:
                          backend: complex
                      (2, analysis_final.yml):
                        wic:
                          backend: complex
