steps:
- setup_pdb.yml:
    in:
      #pdb_id: 1r4l # ACE2
      #pdb_id: 1ntp # trypsin
      pdb_id: 1uao # chignolin (for speed)
      pdb_path: '&pdb.pdbqt'
      box_path: '&box.pdb'
      box_buffer: 20 # Angstroms
      water_type: spce
      forcefield: amber99sb-ildn
- download_ligand_database:
    in:
      database: /NCIOpen.sdf
- extract_molecules_sdf:
    in:
#      output_sdf_path: '&ligands.sdf'
      first_molecule: 1
      last_molecule: 1
- generate_conformers_sdf:
#    in:
#      input_path:
#        source: '*ligands.sdf'
      # Adds hydrogens, minimizes, searches for the lowest energy conformer,
      # then minimizes again.
#      output_sdf_path: '&ligand_min.sdf'
- assign_partial_charges_batch.yml:
# NOTE: split_pdbqt coincidentally also removes keywords.
- split_pdbqt:
#    in:
#      input_path: '*ligand_keywords.pdbqt'
#      output_pdb_path: '&ligand_split.pdbqt' # Array type
- autodock_vina_batch:
    in:
#      input_batch_pdbqt_path: '*ligand_split.pdbqt' # Array type
      input_receptor_pdbqt_path: '*pdb.pdbqt'
      input_box_path: '*box.pdb'
#      output_batch_pdbqt_path: '&poses_ligand.pdbqt' # Array type
      output_log_path: '&vina.log'
- split_pdbqt:
    scatter: [input_path]
#    in:
#      input_path: '*poses_ligand.pdbqt' # Scalar type
#      output_pdb_path: '&ligand_nested_split.pdbqt' # 1D Array type, but
    #out:
    #  output_pdb_path: # 2D Array type due to scattering
- autodock_vina_filter:
    in:
      input_log_path: '*vina.log'
      docking_score_cutoff: -1.0
      max_num_poses_per_ligand: 1
      max_num_poses_total: 1
#      input_batch_pdbqt_path: '*ligand_nested_split.pdbqt' # 2D Array type
#      output_batch_pdbqt_path: '&ligand.pdbqt'
- convert_mol2:
    scatter: [input_path]
#    in:
#      input_path: '*ligand.pdbqt'
#      output_mol2_path: '&pose.mol2'
- python3_mol2_to_mol2:
    scatter: [input_mol2_path]
    in:
      script: /rename_residues_MOL.py # NOTE: Initial / required
#      input_mol2_path: '*pose.mol2'
#      output_mol2_path: '&pose_MOL.mol2'
- acpype:
    scatter: [input_path]
  # NOTE: We are using our own acpypye CWL adapter (NOT the biobb version) so
  # we have the choice of using charges from the mol2 file.
#    in:
#      input_path: '*pose_MOL.mol2' # Do NOT use '*pose_ligand.pdb'
#      output_itp_path: '&ligand_GMX.itp'
      # NOTE: Although we don't need the *.itp topology file yet, we
      # need to use these coordinates with autodock because they are
      # sorted to agree with the *.itp topology include file.
      # Otherwise, we will get the grompp atom name warning (see below).
#      output_gro_path: '&ligand_GMX.gro'
#      output_top_path: '&ligand_GMX.top'
      #charge_method: user # take charges from mol2 file
# NOTE: acpype doesn't add forcefield or water topology #include lines.
- bash_top:
    scatter: [input_top_path]
    in:
      script: /gmx_add_topology_includes.sh # NOTE: Initial / required
#      input_top_path: '*ligand_GMX.top'
#      output_top_path: '&ligand_GMX_includes.top'
- zip_top:
    scatter: [input_top_path, input_itp_path]
    scatterMethod: dotproduct
#    in:
#      input_top_path: '*ligand_GMX_includes.top'
#      input_itp_path: '*ligand_GMX.itp'
#      output_top_zip_path: '&ligand_GMX.zip'
- babel_convert:
    scatter: [input_path]
    in:
#      input_path: '*ligand_GMX.gro' #'*pose_ligand.pdbqt'
      output_path: '&pose_ligand.pdb'

# Molecular Dynamics combine receptor & ligand
- append_ligand:
    scatter: [input_itp_path]
    in:
#      input_itp_path: '*ligand_GMX.itp'
      input_top_zip_path: '*receptor.zip'
      output_top_zip_path: '&complex_vac.zip'
- cat_pdb:
    scatter: [input_structure2]
    in:
      input_structure1: '*receptor_gro.pdb' # '*receptor_hydrogens.pdb'
      input_structure2: '*pose_ligand.pdb'
      output_structure_path: '&complex_vac.pdb'
- stability.yml:
    scatter: [stability__step__1__setup.yml___setup__step__1__gmx_editconf___input_crd_path,
              stability__step__1__setup.yml___setup__step__2__solvate___input_top_zip_path] #[crd_path, top_zip_path]
    scatterMethod: dotproduct
    in:
      nsteps: 10000
      dt: 0.002
      temperature: 298.0
      pressure: 1.0
# NOTE: Do not add scattering arguments here, add them to the wic: metadata annotations.
# (We want this information at the call site, not inserted within the subworkflow.)

wic:
  steps:
    (1, setup_pdb.yml):
      wic:
        inlineable: False
    (3, extract_molecules_sdf):
      wic:
        graphviz:
          label: Choose Ligands from\nCheminformatics Database
    (5, assign_partial_charges.yml):
      wic:
        inlineable: False

    (18, stability.yml):
      wic:
        inlineable: False

